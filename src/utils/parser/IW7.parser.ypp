/* Copyright 2021 xensik. All rights reserved.
//
// Use of this source code is governed by a GNU GPLv3 license
// that can be found in the LICENSE file.
*/

%require "3.7"
%skeleton "lalr1.cc"
%language "c++"
%output "./IW7/compiler_parser.cpp"
%defines "./IW7/compiler_parser.hpp"

%define api.prefix {IW7}
%define api.namespace {IW7}
%define api.value.type variant
%define api.token.constructor
%define api.token.raw
%define parse.assert
%define parse.trace
%define parse.error detailed
%define parse.lac full

%lex-param   { yyscan_t yyscanner }
%lex-param   { std::uint32_t *pos }
%parse-param { yyscan_t yyscanner }
%parse-param { std::uint32_t *pos }
%parse-param { gsc::program_ptr& astout }

%code requires
{
    #include <utils.hpp>
    typedef void *yyscan_t;
    #define YY_DECL IW7::parser::symbol_type IW7lex(yyscan_t yyscanner, std::uint32_t *pos)
}

%code top
{
    #include "IW7.hpp"
    #include "compiler_parser.hpp"
    #include "compiler_lexer.hpp"
    IW7::parser::symbol_type IW7lex(yyscan_t yyscanner, std::uint32_t *pos);
}

%token INCLUDE USINGTREE ANIMTREE ENDON NOTIFY WAIT WAITTILL
%token WAITTILLMATCH WAITTILLFRAMEEND IF ELSE WHILE FOR FOREACH IN
%token SWITCH CASE DEFAULT BREAK CONTINUE RETURN THREAD CHILDTHREAD
%token THISTHREAD CALL TRUE FALSE UNDEFINED SIZE GAME SELF ANIM LEVEL
%token EMPTY_ARRAY LPAREN RPAREN LBRACE RBRACE LBRACKET RBRACKET
%token COMMA DOT DOUBLECOLON COLON SEMICOLON INCREMENT DECREMENT
%token MOD LSHIFT RSHIFT OR AND EQUALITY INEQUALITY LESS_EQUAL
%token GREATER_EQUAL LESS GREATER NOT COMPLEMENT ASSIGN_RSHIFT
%token ASSIGN ASSIGN_ADD ASSIGN_SUB ASSIGN_MULT ASSIGN_DIV ASSIGN_MOD
%token ASSIGN_BITWISE_OR ASSIGN_BITWISE_AND ASSIGN_BITWISE_EXOR ASSIGN_LSHIFT
%token BITWISE_OR BITWISE_AND BITWISE_EXOR ADD SUB MULT DIV
%token <std::string> FILE NAME STRING ISTRING FLOAT INTEGER

%type <gsc::program_ptr>                program
%type <gsc::include_ptr>                include
%type <gsc::define_ptr>                 define
%type <gsc::usingtree_ptr>              usingtree
%type <gsc::constant_ptr>               constant
%type <gsc::thread_ptr>                 thread
%type <gsc::parameters_ptr>             parameters
%type <gsc::block_ptr>                  block
%type <gsc::stmt_ptr>                   stmt
%type <gsc::stmt_return_ptr>            stmt_return
%type <gsc::stmt_continue_ptr>          stmt_continue
%type <gsc::stmt_break_ptr>             stmt_break
%type <gsc::stmt_default_ptr>           stmt_default
%type <gsc::stmt_case_ptr>              stmt_case
%type <gsc::stmt_switch_ptr>            stmt_switch
%type <gsc::stmt_foreach_ptr>           stmt_foreach
%type <gsc::stmt_for_ptr>               stmt_for
%type <gsc::stmt_while_ptr>             stmt_while
%type <gsc::stmt_ifelse_ptr>            stmt_ifelse
%type <gsc::stmt_if_ptr>                stmt_if
%type <gsc::stmt_waittillframeend_ptr>  stmt_waittillframeend
%type <gsc::stmt_waittillmatch_ptr>     stmt_waittillmatch
%type <gsc::stmt_waittill_ptr>          stmt_waittill
%type <gsc::stmt_wait_ptr>              stmt_wait
%type <gsc::stmt_notify_ptr>            stmt_notify
%type <gsc::stmt_endon_ptr>             stmt_endon
%type <gsc::stmt_assign_ptr>            stmt_assign
%type <gsc::stmt_call_ptr>              stmt_call
%type <gsc::expr_ptr>                   for_stmt
%type <gsc::expr_ptr>                   for_expr
%type <gsc::expr_assign_ptr>            expr_assign
%type <gsc::expr_ptr>                   expr
%type <gsc::expr_ptr>                   expr_compare
%type <gsc::expr_ptr>                   expr_binary
%type <gsc::expr_ptr>                   expr_primitive
%type <gsc::expr_call_ptr>              expr_call
%type <gsc::expr_call_ptr>              expr_call_thread
%type <gsc::expr_call_ptr>              expr_call_childthread
%type <gsc::expr_call_type_ptr>         expr_call_function
%type <gsc::expr_call_type_ptr>         expr_call_pointer
%type <gsc::expr_arguments_ptr>         expr_arguments
%type <gsc::node_ptr>                   expr_function
%type <gsc::node_ptr>                   expr_add_array
%type <gsc::node_ptr>                   expr_vector
%type <gsc::node_ptr>                   expr_array
%type <gsc::node_ptr>                   expr_field
%type <gsc::node_ptr>                   expr_self
%type <gsc::node_ptr>                   expr_size
%type <gsc::node_ptr>                   object
%type <gsc::thisthread_ptr>             thisthread
%type <gsc::empty_array_ptr>            empty_array
%type <gsc::undefined_ptr>              undefined
%type <gsc::game_ptr>                   game
%type <gsc::self_ptr>                   self
%type <gsc::anim_ptr>                   anim
%type <gsc::level_ptr>                  level
%type <gsc::animation_ptr>              animation
%type <gsc::animtree_ptr>               animtree
%type <gsc::name_ptr>                   name
%type <gsc::file_ptr>                   file
%type <gsc::istring_ptr>                istring
%type <gsc::string_ptr>                 string
%type <gsc::node_ptr>                   vector
%type <gsc::number_ptr>                 number
%type <gsc::float_ptr>                  neg_float
%type <gsc::integer_ptr>                neg_integer
%type <gsc::float_ptr>                  float
%type <gsc::integer_ptr>                integer
%type <gsc::false_ptr>                  false
%type <gsc::true_ptr>                   true

%start root

%%

root
    : program { astout = std::move($1); }
    |         { astout = std::make_unique<gsc::node_program>(); }
    ;

program
    : program include
        { $$ = std::move($1); $$->includes.push_back(std::move($2)); }
    | program define
        { $$ = std::move($1); $$->definitions.push_back(std::move($2)); }
    | include
        { $$ = std::make_unique<gsc::node_program>(*pos); $$->includes.push_back(std::move($1)); }
    | define
        { $$ = std::make_unique<gsc::node_program>(*pos); $$->definitions.push_back(std::move($1)); }
    ;

include
    : INCLUDE file SEMICOLON
        { $$ = std::make_unique<gsc::node_include>(*pos, std::move($2)); }
    ;

define
    : usingtree    { $$.as_usingtree = std::move($1); }
    | constant     { $$.as_constant = std::move($1); }
    | thread       { $$.as_thread = std::move($1); }
    ;

usingtree
    : USINGTREE LPAREN string RPAREN SEMICOLON
        { $$ = std::make_unique<gsc::node_usingtree>(*pos, std::move($3)); }
    ;

constant
    : name ASSIGN expr SEMICOLON
        { $$ = std::make_unique<gsc::node_constant>(*pos, std::move($1), std::move($3)); }
    ;

thread
    : name LPAREN parameters RPAREN LBRACE block RBRACE
        { $$ = std::make_unique<gsc::node_thread>(*pos, std::move($1), std::move($3), std::move($6)); }
    ;

parameters
    : parameters COMMA name
        { $$ = std::move($1); $$->list.push_back(std::move($3)); }
    | name
        { $$ = std::make_unique<gsc::node_parameters>(*pos); $$->list.push_back(std::move($1)); }
    |
        { $$ = std::make_unique<gsc::node_parameters>(*pos); }
    ;

block
    : block stmt
        { $$ = std::move($1); $$->stmts.push_back(std::move($2)); }
    | stmt
        { $$ = std::make_unique<gsc::node_block>(*pos); $$->stmts.push_back(std::move($1)); }
    |
        { $$ = std::make_unique<gsc::node_block>(*pos); }
    ;

stmt
    : stmt_call              { $$.as_call = std::move($1); }
    | stmt_assign            { $$.as_assign = std::move($1); }
    | stmt_endon             { $$.as_endon = std::move($1); }
    | stmt_notify            { $$.as_notify = std::move($1); }
    | stmt_wait              { $$.as_wait = std::move($1); }
    | stmt_waittill          { $$.as_waittill = std::move($1); }
    | stmt_waittillmatch     { $$.as_waittillmatch = std::move($1); }
    | stmt_waittillframeend  { $$.as_waittillframeend = std::move($1); }
    | stmt_if                { $$.as_if = std::move($1); }
    | stmt_ifelse            { $$.as_ifelse = std::move($1); }
    | stmt_while             { $$.as_while = std::move($1); }
    | stmt_for               { $$.as_for = std::move($1); }
    | stmt_foreach           { $$.as_foreach = std::move($1); }
    | stmt_switch            { $$.as_switch = std::move($1); }
    | stmt_case              { $$.as_case = std::move($1); }
    | stmt_default           { $$.as_default = std::move($1); }
    | stmt_break             { $$.as_break = std::move($1); }
    | stmt_continue          { $$.as_continue = std::move($1); }
    | stmt_return            { $$.as_return = std::move($1); }
    ;

stmt_call
    : expr_call SEMICOLON
        { $$ = std::make_unique<gsc::node_stmt_call>(*pos, std::move($1)); }
    | expr_call_thread SEMICOLON
        { $$ = std::make_unique<gsc::node_stmt_call>(*pos, std::move($1)); }
    ;

stmt_assign
    : expr_assign SEMICOLON
        { $$ = std::make_unique<gsc::node_stmt_assign>(*pos, std::move($1)); }
    ;

stmt_endon
    : object ENDON LPAREN expr RPAREN SEMICOLON
        { $$ = std::make_unique<gsc::node_stmt_endon>(*pos, std::move($1), std::move($4)); }
    ;

stmt_notify
    : object NOTIFY LPAREN expr COMMA expr_arguments RPAREN SEMICOLON
        { $$ = std::make_unique<gsc::node_stmt_notify>(*pos, std::move($1), std::move($4), std::move($6)); }
    | object NOTIFY LPAREN expr RPAREN SEMICOLON
        { $$ = std::make_unique<gsc::node_stmt_notify>(*pos, std::move($1), std::move($4), std::make_unique<gsc::node_expr_arguments>(*pos)); }
    ;

stmt_wait
    : WAIT LPAREN expr RPAREN SEMICOLON
        { $$ = std::make_unique<gsc::node_stmt_wait>(*pos, std::move($3)); }
    | WAIT number SEMICOLON
        { $$ = std::make_unique<gsc::node_stmt_wait>(*pos, gsc::expr_ptr(std::move($2.as_node))); }
    ;

stmt_waittill
    : object WAITTILL LPAREN expr COMMA expr_arguments RPAREN SEMICOLON
        { $$ = std::make_unique<gsc::node_stmt_waittill>(*pos, std::move($1), std::move($4), std::move($6)); }
    | object WAITTILL LPAREN expr RPAREN SEMICOLON
        { $$ = std::make_unique<gsc::node_stmt_waittill>(*pos, std::move($1), std::move($4), std::make_unique<gsc::node_expr_arguments>(*pos)); }
    ;

stmt_waittillmatch
    : object WAITTILLMATCH LPAREN expr COMMA expr RPAREN SEMICOLON
        { $$ = std::make_unique<gsc::node_stmt_waittillmatch>(*pos, std::move($1), std::move($4), std::move($6)); }
    ;

stmt_waittillframeend
    : WAITTILLFRAMEEND SEMICOLON
        { $$ = std::make_unique<gsc::node_stmt_waittillframeend>(*pos); }
    ;

stmt_if
    : IF LPAREN expr RPAREN LBRACE block RBRACE
        { $$ = std::make_unique<gsc::node_stmt_if>(*pos, std::move($3), std::move($6)); }
    | IF LPAREN expr RPAREN stmt
        {
            auto blk = std::make_unique<gsc::node_block>(*pos);
            blk->stmts.push_back(std::move($5));
            $$ = std::make_unique<gsc::node_stmt_if>(*pos, std::move($3), std::move(blk));
        }
    ;

stmt_ifelse
    : IF LPAREN expr RPAREN LBRACE block RBRACE ELSE LBRACE block RBRACE
        { $$ = std::make_unique<gsc::node_stmt_ifelse>(*pos, std::move($3), std::move($6), std::move($10)); }
    | IF LPAREN expr RPAREN stmt ELSE LBRACE block RBRACE
        {
            auto blk = std::make_unique<gsc::node_block>(*pos);
            blk->stmts.push_back(std::move($5));
            $$ = std::make_unique<gsc::node_stmt_ifelse>(*pos, std::move($3), std::move(blk), std::move($8));
        }
    | IF LPAREN expr RPAREN LBRACE block RBRACE ELSE stmt
        { 
            auto blk = std::make_unique<gsc::node_block>(*pos);
            blk->stmts.push_back(std::move($9));
            $$ = std::make_unique<gsc::node_stmt_ifelse>(*pos, std::move($3), std::move($6), std::move(blk));
        }
    | IF LPAREN expr RPAREN stmt ELSE stmt
        {
            auto blk1 = std::make_unique<gsc::node_block>(*pos);
            blk1->stmts.push_back(std::move($5));
            auto blk2 = std::make_unique<gsc::node_block>(*pos);
            blk2->stmts.push_back(std::move($7));
            $$ = std::make_unique<gsc::node_stmt_ifelse>(*pos, std::move($3), std::move(blk1), std::move(blk2));
        }
    ;

stmt_while
    : WHILE LPAREN expr RPAREN LBRACE block RBRACE
        { $$ = std::make_unique<gsc::node_stmt_while>(*pos, std::move($3), std::move($6)); }
    | WHILE LPAREN expr RPAREN stmt
        {
            auto blk = std::make_unique<gsc::node_block>(*pos);
            blk->stmts.push_back(std::move($5));
            $$ = std::make_unique<gsc::node_stmt_while>(*pos, std::move($3), std::move(blk)); }
    ;

stmt_for
    : FOR LPAREN for_stmt SEMICOLON for_expr SEMICOLON for_stmt RPAREN LBRACE block RBRACE
        { $$ = std::make_unique<gsc::node_stmt_for>(*pos, std::move($3), std::move($5), std::move($7), std::move($10)); }
    | FOR LPAREN for_stmt SEMICOLON for_expr SEMICOLON for_stmt RPAREN stmt
        {
            auto blk = std::make_unique<gsc::node_block>(*pos);
            blk->stmts.push_back(std::move($9));
            $$ = std::make_unique<gsc::node_stmt_for>(*pos, std::move($3), std::move($5), std::move($7), std::move(blk));
        }
    ;

stmt_foreach
    : FOREACH LPAREN name IN expr RPAREN LBRACE block RBRACE
        { $$ = std::make_unique<gsc::node_stmt_foreach>(*pos, std::move($3), std::move($5), std::move($8)); }
    | FOREACH LPAREN name COMMA name IN expr RPAREN LBRACE block RBRACE
        { $$ = std::make_unique<gsc::node_stmt_foreach>(*pos, std::move($3), std::move($5), std::move($7), std::move($10)); }
    | FOREACH LPAREN name IN expr RPAREN stmt
        {
        auto blk = std::make_unique<gsc::node_block>(*pos);
            blk->stmts.push_back(std::move($7));
            $$ = std::make_unique<gsc::node_stmt_foreach>(*pos, std::move($3), std::move($5), std::move(blk));
        }
    | FOREACH LPAREN name COMMA name IN expr RPAREN stmt
        {
            auto blk = std::make_unique<gsc::node_block>(*pos);
            blk->stmts.push_back(std::move($9));
            $$ = std::make_unique<gsc::node_stmt_foreach>(*pos, std::move($3), std::move($5), std::move($7), std::move(blk));
        }
    ;

stmt_switch
    : SWITCH LPAREN expr RPAREN LBRACE block RBRACE
        { $$ = std::make_unique<gsc::node_stmt_switch>(*pos, std::move($3), std::move($6)); }
    ;

stmt_case
    : CASE integer COLON
        { $$ = std::make_unique<gsc::node_stmt_case>(*pos, gsc::expr_ptr(std::move($2))); }
    | CASE neg_integer COLON
        { $$ = std::make_unique<gsc::node_stmt_case>(*pos, gsc::expr_ptr(std::move($2))); }
    | CASE string COLON
        { $$ = std::make_unique<gsc::node_stmt_case>(*pos, gsc::expr_ptr(std::move($2))); }
    ;

stmt_default
    : DEFAULT COLON
        { $$ = std::make_unique<gsc::node_stmt_default>(*pos); }
    ;

stmt_break
    : BREAK SEMICOLON 
        { $$ = std::make_unique<gsc::node_stmt_break>(*pos); }
    ;

stmt_continue
    : CONTINUE SEMICOLON
        { $$ = std::make_unique<gsc::node_stmt_continue>(*pos); }
    ;

stmt_return
    : RETURN expr SEMICOLON
        { $$ = std::make_unique<gsc::node_stmt_return>(*pos, std::move($2)); }
    | RETURN SEMICOLON
        { $$ = std::make_unique<gsc::node_stmt_return>(*pos, std::make_unique<gsc::node>()); }
    ;

for_stmt
    : expr_assign                       { $$.as_node = std::move($1); }
    |                                   { $$.as_node = std::make_unique<gsc::node>(); }
    ;

for_expr
    : expr_compare                      { $$ = std::move($1); }
    |                                   { $$.as_node = std::make_unique<gsc::node>(); }
    ;

expr
    : expr_compare                      { $$ = std::move($1); }
    | expr_binary                       { $$ = std::move($1); }
    | expr_primitive                    { $$ = std::move($1); }
    ;

expr_assign
    : object INCREMENT                  { $$ = std::make_unique<gsc::node_expr_increment>(*pos, std::move($1)); }
    | object DECREMENT                  { $$ = std::make_unique<gsc::node_expr_decrement>(*pos, std::move($1)); }
    | object ASSIGN expr                { $$ = std::make_unique<gsc::node_expr_assign_equal>(*pos, std::move($1), std::move($3)); }
    | object ASSIGN_BITWISE_OR expr     { $$ = std::make_unique<gsc::node_expr_assign_bitwise_or>(*pos, std::move($1), std::move($3)); }
    | object ASSIGN_BITWISE_AND expr    { $$ = std::make_unique<gsc::node_expr_assign_bitwise_and>(*pos, std::move($1), std::move($3)); }
    | object ASSIGN_BITWISE_EXOR expr   { $$ = std::make_unique<gsc::node_expr_assign_bitwise_exor>(*pos, std::move($1), std::move($3)); }
    | object ASSIGN_LSHIFT expr         { $$ = std::make_unique<gsc::node_expr_assign_shift_left>(*pos, std::move($1),std::move( $3)); }
    | object ASSIGN_RSHIFT expr         { $$ = std::make_unique<gsc::node_expr_assign_shift_right>(*pos, std::move($1), std::move($3)); }
    | object ASSIGN_ADD expr            { $$ = std::make_unique<gsc::node_expr_assign_add>(*pos, std::move($1), std::move($3)); }
    | object ASSIGN_SUB expr            { $$ = std::make_unique<gsc::node_expr_assign_sub>(*pos, std::move($1), std::move($3)); }
    | object ASSIGN_MULT expr           { $$ = std::make_unique<gsc::node_expr_assign_mult>(*pos, std::move($1), std::move($3)); }
    | object ASSIGN_DIV expr            { $$ = std::make_unique<gsc::node_expr_assign_div>(*pos, std::move($1), std::move($3)); }
    | object ASSIGN_MOD expr            { $$ = std::make_unique<gsc::node_expr_assign_mod>(*pos, std::move($1), std::move($3)); }
    ;

expr_compare
    : expr OR expr                      { $$.as_node = std::make_unique<gsc::node_expr_or>(*pos, std::move($1), std::move($3)); }
    | expr AND expr                     { $$.as_node = std::make_unique<gsc::node_expr_and>(*pos, std::move($1), std::move($3)); }
    | expr EQUALITY expr                { $$.as_node = std::make_unique<gsc::node_expr_equality>(*pos, std::move($1), std::move($3)); }
    | expr INEQUALITY expr              { $$.as_node = std::make_unique<gsc::node_expr_inequality>(*pos, std::move($1), std::move($3)); }
    | expr LESS_EQUAL expr              { $$.as_node = std::make_unique<gsc::node_expr_less_equal>(*pos, std::move($1), std::move($3)); }
    | expr GREATER_EQUAL expr           { $$.as_node = std::make_unique<gsc::node_expr_greater_equal>(*pos, std::move($1), std::move($3)); }
    | expr LESS expr                    { $$.as_node = std::make_unique<gsc::node_expr_less>(*pos, std::move($1), std::move($3)); }
    | expr GREATER expr                 { $$.as_node = std::make_unique<gsc::node_expr_greater>(*pos, std::move($1), std::move($3)); }
    ;

expr_binary
    : expr BITWISE_OR expr              { $$.as_node = std::make_unique<gsc::node_expr_bitwise_or>(*pos, std::move($1), std::move($3)); }
    | expr BITWISE_AND expr             { $$.as_node = std::make_unique<gsc::node_expr_bitwise_and>(*pos, std::move($1), std::move($3)); }
    | expr BITWISE_EXOR expr            { $$.as_node = std::make_unique<gsc::node_expr_bitwise_exor>(*pos, std::move($1), std::move($3)); }
    | expr LSHIFT expr                  { $$.as_node = std::make_unique<gsc::node_expr_shift_left>(*pos, std::move($1), std::move($3)); }
    | expr RSHIFT expr                  { $$.as_node = std::make_unique<gsc::node_expr_shift_right>(*pos, std::move($1), std::move($3)); }
    | expr ADD expr                     { $$.as_node = std::make_unique<gsc::node_expr_add>(*pos, std::move($1), std::move($3)); }
    | expr SUB expr                     { $$.as_node = std::make_unique<gsc::node_expr_sub>(*pos, std::move($1), std::move($3)); }
    | expr MULT expr                    { $$.as_node = std::make_unique<gsc::node_expr_mult>(*pos, std::move($1), std::move($3)); }
    | expr DIV expr                     { $$.as_node = std::make_unique<gsc::node_expr_div>(*pos, std::move($1), std::move($3)); }
    | expr MOD expr                     { $$.as_node = std::make_unique<gsc::node_expr_mod>(*pos, std::move($1), std::move($3)); }
    ;

expr_primitive
    : LPAREN expr RPAREN                { $$ = std::move($2); }
    | COMPLEMENT expr                   { $$.as_node = std::make_unique<gsc::node_expr_complement>(*pos, std::move($2)); }
    | NOT expr                          { $$.as_node = std::make_unique<gsc::node_expr_not>(*pos, std::move($2)); }
    | expr_call                         { $$.as_node = std::move($1); }
    | expr_call_thread                  { $$.as_node = std::move($1); }
    | expr_call_childthread             { $$.as_node = std::move($1); }
    | expr_function                     { $$.as_node = std::move($1); }
    | expr_add_array                    { $$.as_node = std::move($1); }
    | expr_vector                       { $$.as_node = std::move($1); }
    | expr_array                        { $$.as_node = std::move($1); }
    | expr_field                        { $$.as_node = std::move($1); }
    | expr_self                         { $$.as_node = std::move($1); }
    | expr_size                         { $$.as_node = std::move($1); }
    | thisthread                        { $$.as_node = std::move($1); }
    | empty_array                       { $$.as_node = std::move($1); }
    | undefined                         { $$.as_node = std::move($1); }
    | game                              { $$.as_node = std::move($1); }
    | self                              { $$.as_node = std::move($1); }
    | anim                              { $$.as_node = std::move($1); }
    | level                             { $$.as_node = std::move($1); }
    | animation                         { $$.as_node = std::move($1); }
    | animtree                          { $$.as_node = std::move($1); }
    | name                              { $$.as_node = std::move($1); }
    | istring                           { $$.as_node = std::move($1); }
    | string                            { $$.as_node = std::move($1); }
    | vector                            { $$.as_node = std::move($1); }
    | number                            { $$.as_node = std::move($1.as_node); }
    | false                             { $$.as_node = std::move($1); }
    | true                              { $$.as_node = std::move($1); }
    ;

expr_call
    : expr_call_function                { $$ = std::make_unique<gsc::node_expr_call>(*pos, false, false, std::make_unique<gsc::node>(), std::move($1)); }
    | expr_call_pointer                 { $$ = std::make_unique<gsc::node_expr_call>(*pos, false, false, std::make_unique<gsc::node>(), std::move($1)); }
    | object expr_call_function         { $$ = std::make_unique<gsc::node_expr_call>(*pos, false, false, std::move($1), std::move($2)); }
    | object expr_call_pointer          { $$ = std::make_unique<gsc::node_expr_call>(*pos, false, false, std::move($1), std::move($2)); }
    ;

expr_call_thread
    : THREAD expr_call_function         { $$ = std::make_unique<gsc::node_expr_call>(*pos, true, false, std::make_unique<gsc::node>(), std::move($2)); }
    | THREAD expr_call_pointer          { $$ = std::make_unique<gsc::node_expr_call>(*pos, true, false, std::make_unique<gsc::node>(), std::move($2)); }
    | object THREAD expr_call_function  { $$ = std::make_unique<gsc::node_expr_call>(*pos, true, false, std::move($1), std::move($3)); }
    | object THREAD expr_call_pointer   { $$ = std::make_unique<gsc::node_expr_call>(*pos, true, false, std::move($1), std::move($3)); }
    ;

expr_call_childthread
    : CHILDTHREAD expr_call_function        { $$ = std::make_unique<gsc::node_expr_call>(*pos, false, true, std::make_unique<gsc::node>(), std::move($2)); }
    | CHILDTHREAD expr_call_pointer         { $$ = std::make_unique<gsc::node_expr_call>(*pos, false, true, std::make_unique<gsc::node>(), std::move($2)); }
    | object CHILDTHREAD expr_call_function { $$ = std::make_unique<gsc::node_expr_call>(*pos, false, true, std::move($1), std::move($3)); }
    | object CHILDTHREAD expr_call_pointer  { $$ = std::make_unique<gsc::node_expr_call>(*pos, false, true, std::move($1), std::move($3)); }
    ;

expr_call_function
    : name LPAREN expr_arguments RPAREN
        {$$.as_func = std::make_unique<gsc::node_expr_call_function>(*pos, std::make_unique<gsc::node_file>(), std::move($1), std::move($3)); }
    | file DOUBLECOLON name LPAREN expr_arguments RPAREN
        { $$.as_func = std::make_unique<gsc::node_expr_call_function>(*pos, std::move($1), std::move($3), std::move($5)); }
    ;

expr_call_pointer
    : LBRACKET LBRACKET expr RBRACKET RBRACKET LPAREN expr_arguments RPAREN
        { $$.as_pointer = std::make_unique<gsc::node_expr_call_pointer>(*pos, false, std::move($3), std::move($7)); }
    | CALL LBRACKET LBRACKET expr RBRACKET RBRACKET LPAREN expr_arguments RPAREN
        { $$.as_pointer = std::make_unique<gsc::node_expr_call_pointer>(*pos, true, std::move($4), std::move($8)); }
    ;

expr_arguments
    : expr_arguments COMMA expr
        { $$ = std::move($1); $$->list.push_back(std::move($3)); }
    | expr
        { $$ = std::make_unique<gsc::node_expr_arguments>(*pos); $$->list.push_back(std::move($1)); }
    |
        { $$ = std::make_unique<gsc::node_expr_arguments>(*pos); }
    ;

expr_function
    : DOUBLECOLON name
        { $$ = std::make_unique<gsc::node_expr_function>(*pos, std::make_unique<gsc::node_file>(), std::move($2)); }
    | file DOUBLECOLON name
        { $$ = std::make_unique<gsc::node_expr_function>(*pos, std::move($1), std::move($3)); }
    ;

expr_add_array
    : LBRACKET expr_arguments RBRACKET
        { $$ = std::make_unique<gsc::node_expr_add_array>(*pos, std::move($2)); }
    ;

expr_vector
    : LPAREN expr COMMA expr COMMA expr RPAREN 
        { $$ = std::make_unique<gsc::node_expr_vector>(*pos, std::move($2), std::move($4), std::move($6)); }
    ;

expr_array
    : object LBRACKET expr RBRACKET
        { $$ = std::make_unique<gsc::node_expr_array>(*pos, std::move($1), std::move($3)); }
    ;

expr_field
    : object DOT name
        { $$ = std::make_unique<gsc::node_expr_field>(*pos, std::move($1), std::move($3)); }
    ;

expr_self
    : object DOT SELF
        { $$ = std::make_unique<gsc::node_expr_self>(*pos, std::move($1)); }
    ;

expr_size
    : object DOT SIZE
        { $$ = std::make_unique<gsc::node_expr_size>(*pos, std::move($1)); }
    ;

object
    : expr_call           { $$ = std::move($1); }
    | expr_array          { $$ = std::move($1); }
    | expr_field          { $$ = std::move($1); }
    | game                { $$ = std::move($1); }
    | self                { $$ = std::move($1); }
    | anim                { $$ = std::move($1); }
    | level               { $$ = std::move($1); }
    | name                { $$ = std::move($1); }
    ;

thisthread  : THISTHREAD  { $$ = std::make_unique<gsc::node_thisthread>(*pos); };
empty_array : EMPTY_ARRAY { $$ = std::make_unique<gsc::node_empty_array>(*pos); };
undefined   : UNDEFINED   { $$ = std::make_unique<gsc::node_undefined>(*pos); };
game        : GAME        { $$ = std::make_unique<gsc::node_game>(*pos); };
self        : SELF        { $$ = std::make_unique<gsc::node_self>(*pos); };
anim        : ANIM        { $$ = std::make_unique<gsc::node_anim>(*pos); };
level       : LEVEL       { $$ = std::make_unique<gsc::node_level>(*pos); };
animation   : MOD NAME    { $$ = std::make_unique<gsc::node_animation>(*pos, $2); };
animtree    : ANIMTREE    { $$ = std::make_unique<gsc::node_animtree>(*pos); };
name        : NAME        { $$ = std::make_unique<gsc::node_name>(*pos, $1); };
file        : FILE        { $$ = std::make_unique<gsc::node_file>(*pos, $1); };
istring     : ISTRING     { $$ = std::make_unique<gsc::node_istring>(*pos, $1); };
string      : STRING      { $$ = std::make_unique<gsc::node_string>(*pos, $1); };

vector
    : LPAREN number COMMA number COMMA number RPAREN
        { $$ = std::make_unique<gsc::node_vector>(*pos, std::move($2), std::move($4), std::move($6)); }
    ;

number
    : neg_float           { $$.as_float   = std::move($1); }
    | neg_integer         { $$.as_integer = std::move($1); }
    | float               { $$.as_float   = std::move($1); }
    | integer             { $$.as_integer  = std::move($1); }
    ;

neg_float   : SUB FLOAT   { $$ = std::make_unique<gsc::node_float>(*pos, "-" + $2); };
neg_integer : SUB INTEGER { $$ = std::make_unique<gsc::node_integer>(*pos, "-" + $2); };
float       : FLOAT       { $$ = std::make_unique<gsc::node_float>(*pos, $1); };
integer     : INTEGER     { $$ = std::make_unique<gsc::node_integer>(*pos, $1); };
false       : FALSE       { $$ = std::make_unique<gsc::node_false>(*pos); };
true        : TRUE        { $$ = std::make_unique<gsc::node_true>(*pos); };

%%

void IW7::parser::error(const std::string& msg)
{
    throw gsc::comp_error(0, msg);
}
