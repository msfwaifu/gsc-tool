/* Copyright 2021 xensik. All rights reserved.
//
// Use of this source code is governed by a GNU GPLv3 license
// that can be found in the LICENSE file.
*/

%option outfile="./IW7/compiler_lexer.cpp"
%option header-file="./IW7/compiler_lexer.hpp"
%option prefix = "IW7"
%option reentrant
%option case-insensitive
%option noyywrap batch nounput noinput
%option never-interactive
%option nounistd

%top{
#include "IW7.hpp"
#include "compiler_parser.hpp"
#ifndef YY_NO_UNISTD_H
#define YY_NO_UNISTD_H
#endif
}

RGX_FILE			([_A-Za-z0-9]+\\)+[_A-Za-z0-9]+
RGX_NAME			[_A-Za-z][_A-Za-z0-9\-]*
RGX_STRING			\"(?:\\.|[^\"])*?\"|\'(?:\\.|[^\'])*?\'
RGX_FLOAT			[0-9]+\.(?:[0-9]*)?f?|\.[0-9]+f?
RGX_INTEGER			[0-9]+
RGX_DEFAULT			(.|\n)

%x COMMENT_BLOCK_STATE
%x DEVELOPER_BLOCK_STATE

%%

[ \t\r]

\n							{ (*pos)++; }

"//".*

"/*"						{ BEGIN(COMMENT_BLOCK_STATE); }
<COMMENT_BLOCK_STATE>.
<COMMENT_BLOCK_STATE>\n		{ (*pos)++; }
<COMMENT_BLOCK_STATE>"*/"	{ BEGIN(INITIAL); }

"/#"						{ BEGIN(DEVELOPER_BLOCK_STATE); }
<DEVELOPER_BLOCK_STATE>.
<DEVELOPER_BLOCK_STATE>\n	{ (*pos)++; }
<DEVELOPER_BLOCK_STATE>"#/"	{ BEGIN(INITIAL); }	

"#include"			{ return IW7::parser::make_INCLUDE(); }
"#using_animtree"	{ return IW7::parser::make_USINGTREE(); }
"#animtree"			{ return IW7::parser::make_ANIMTREE(); }
"endon"				{ return IW7::parser::make_ENDON(); }
"notify"			{ return IW7::parser::make_NOTIFY(); }
"wait"				{ return IW7::parser::make_WAIT(); }
"waittill"			{ return IW7::parser::make_WAITTILL(); }
"waittillmatch"		{ return IW7::parser::make_WAITTILLMATCH(); }
"waittillframeend"	{ return IW7::parser::make_WAITTILLFRAMEEND(); }
"if"				{ return IW7::parser::make_IF(); }
"else"				{ return IW7::parser::make_ELSE(); }
"while"				{ return IW7::parser::make_WHILE(); }
"for"				{ return IW7::parser::make_FOR(); }
"foreach"			{ return IW7::parser::make_FOREACH(); }
"in"				{ return IW7::parser::make_IN(); }
"switch"			{ return IW7::parser::make_SWITCH(); }
"case"				{ return IW7::parser::make_CASE(); }
"default"			{ return IW7::parser::make_DEFAULT(); }
"break"				{ return IW7::parser::make_BREAK(); }
"continue"			{ return IW7::parser::make_CONTINUE(); }
"return"			{ return IW7::parser::make_RETURN(); }
"thread"			{ return IW7::parser::make_THREAD(); }
"childthread"		{ return IW7::parser::make_CHILDTHREAD(); }
"thisthread"		{ return IW7::parser::make_THISTHREAD(); }
"call"				{ return IW7::parser::make_CALL(); }
"true"				{ return IW7::parser::make_TRUE(); }
"false"				{ return IW7::parser::make_FALSE(); }
"undefined"			{ return IW7::parser::make_UNDEFINED(); }
"size"				{ return IW7::parser::make_SIZE(); }
"game"				{ return IW7::parser::make_GAME(); }
"self"				{ return IW7::parser::make_SELF(); }
"anim"				{ return IW7::parser::make_ANIM(); }
"level"				{ return IW7::parser::make_LEVEL(); }
"[]"				{ return IW7::parser::make_EMPTY_ARRAY(); }
\(					{ return IW7::parser::make_LPAREN(); }
\)					{ return IW7::parser::make_RPAREN(); }
\{					{ return IW7::parser::make_LBRACE(); }
\}					{ return IW7::parser::make_RBRACE(); }
\[					{ return IW7::parser::make_LBRACKET(); }
\]					{ return IW7::parser::make_RBRACKET(); }
\,					{ return IW7::parser::make_COMMA(); }
\.					{ return IW7::parser::make_DOT(); }
\:\:				{ return IW7::parser::make_DOUBLECOLON(); }
\:					{ return IW7::parser::make_COLON(); }
\;					{ return IW7::parser::make_SEMICOLON(); }
\+\+				{ return IW7::parser::make_INCREMENT(); }
\-\-				{ return IW7::parser::make_DECREMENT(); }
\<\<\=				{ return IW7::parser::make_ASSIGN_LSHIFT(); }
\>\>\=				{ return IW7::parser::make_ASSIGN_RSHIFT(); }
\<\<				{ return IW7::parser::make_LSHIFT(); }
\>\>				{ return IW7::parser::make_RSHIFT(); }
\|\|				{ return IW7::parser::make_OR(); }
\&\&				{ return IW7::parser::make_AND(); }
\=\=				{ return IW7::parser::make_EQUALITY(); }
\!\=				{ return IW7::parser::make_INEQUALITY(); }
\<\=				{ return IW7::parser::make_LESS_EQUAL(); }
\>\=				{ return IW7::parser::make_GREATER_EQUAL(); }
\<					{ return IW7::parser::make_LESS(); }
\>					{ return IW7::parser::make_GREATER(); }
\+\=				{ return IW7::parser::make_ASSIGN_ADD(); }
\-\=				{ return IW7::parser::make_ASSIGN_SUB(); }
\*\=				{ return IW7::parser::make_ASSIGN_MULT(); }
\/\=				{ return IW7::parser::make_ASSIGN_DIV(); }
\%\=				{ return IW7::parser::make_ASSIGN_MOD(); }
\|\=				{ return IW7::parser::make_ASSIGN_BITWISE_OR(); }
\&\=				{ return IW7::parser::make_ASSIGN_BITWISE_AND(); }
\^\=				{ return IW7::parser::make_ASSIGN_BITWISE_EXOR(); }
\=					{ return IW7::parser::make_ASSIGN(); }
\+					{ return IW7::parser::make_ADD(); }
\-					{ return IW7::parser::make_SUB(); }
\*					{ return IW7::parser::make_MULT(); }
\/					{ return IW7::parser::make_DIV(); }
\%					{ return IW7::parser::make_MOD(); }
\!					{ return IW7::parser::make_NOT(); }
\~					{ return IW7::parser::make_COMPLEMENT(); }
\|					{ return IW7::parser::make_BITWISE_OR(); }
\&					{ return IW7::parser::make_BITWISE_AND(); }
\^					{ return IW7::parser::make_BITWISE_EXOR(); }

{RGX_FILE}			{ return IW7::parser::make_FILE(std::string(yytext)); }
{RGX_NAME}			{ return IW7::parser::make_NAME(utils::string::to_lower(yytext)); }
\&{RGX_STRING}		{ return IW7::parser::make_ISTRING(std::string(yytext).substr(1)); }
{RGX_STRING}		{ return IW7::parser::make_STRING(std::string(yytext)); }
{RGX_FLOAT}			{ return IW7::parser::make_FLOAT(std::string(yytext)); }
{RGX_INTEGER}		{ return IW7::parser::make_INTEGER(std::string(yytext)); }

<<EOF>>				{ return IW7::parser::make_IW7EOF(); }
<*>{RGX_DEFAULT}	{ throw IW7::parser::syntax_error("invalid character: \'" + std::string(yytext) + "\' at line " + std::to_string(*pos)); }
%%
