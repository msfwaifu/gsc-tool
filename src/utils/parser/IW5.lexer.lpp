/* Copyright 2021 xensik. All rights reserved.
//
// Use of this source code is governed by a GNU GPLv3 license
// that can be found in the LICENSE file.
*/

%option outfile="./IW5/compiler_lexer.cpp"
%option header-file="./IW5/compiler_lexer.hpp"
%option prefix = "IW5"
%option reentrant
%option case-insensitive
%option noyywrap batch nounput noinput
%option never-interactive
%option nounistd

%top{
#include "IW5.hpp"
#include "compiler_parser.hpp"
#ifndef YY_NO_UNISTD_H
#define YY_NO_UNISTD_H
#endif
}

%{
#define YY_USER_ACTION  loc.columns(yyleng);
%}

RGX_FILE			([_A-Za-z0-9]+\\)+[_A-Za-z0-9]+
RGX_NAME			[_A-Za-z][_A-Za-z0-9]*
RGX_STRING			\"(?:\\.|[^\"])*?\"|\'(?:\\.|[^\'])*?\'
RGX_FLOAT			[0-9]+\.(?:[0-9]*)?f?|\.[0-9]+f?
RGX_INTEGER			[0-9]+
RGX_DEFAULT			(.|\n)

%x COMMENT_BLOCK_STATE
%x DEVELOPER_BLOCK_STATE

%%

%{
    loc.step();
%}

[ \t\r]                     { loc.step(); }

\n							{ loc.lines(yyleng); loc.step(); }

"//".*

"/*"						{ BEGIN(COMMENT_BLOCK_STATE); }
<COMMENT_BLOCK_STATE>.
<COMMENT_BLOCK_STATE>\n		{ loc.lines(yyleng); loc.step(); }
<COMMENT_BLOCK_STATE>"*/"	{ BEGIN(INITIAL); }

"/#"						{ BEGIN(DEVELOPER_BLOCK_STATE); }
<DEVELOPER_BLOCK_STATE>.
<DEVELOPER_BLOCK_STATE>\n	{ loc.lines(yyleng); loc.step(); }
<DEVELOPER_BLOCK_STATE>"#/"	{ BEGIN(INITIAL); }	

"#include"			{ return IW5::parser::make_INCLUDE(loc); }
"#using_animtree"	{ return IW5::parser::make_USINGTREE(loc); }
"#animtree"			{ return IW5::parser::make_ANIMTREE(loc); }
"endon"				{ return IW5::parser::make_ENDON(loc); }
"notify"			{ return IW5::parser::make_NOTIFY(loc); }
"wait"				{ return IW5::parser::make_WAIT(loc); }
"waittill"			{ return IW5::parser::make_WAITTILL(loc); }
"waittillmatch"		{ return IW5::parser::make_WAITTILLMATCH(loc); }
"waittillframeend"	{ return IW5::parser::make_WAITTILLFRAMEEND(loc); }
"if"				{ return IW5::parser::make_IF(loc); }
"else"				{ return IW5::parser::make_ELSE(loc); }
"while"				{ return IW5::parser::make_WHILE(loc); }
"for"				{ return IW5::parser::make_FOR(loc); }
"foreach"			{ return IW5::parser::make_FOREACH(loc); }
"in"				{ return IW5::parser::make_IN(loc); }
"switch"			{ return IW5::parser::make_SWITCH(loc); }
"case"				{ return IW5::parser::make_CASE(loc); }
"default"			{ return IW5::parser::make_DEFAULT(loc); }
"break"				{ return IW5::parser::make_BREAK(loc); }
"continue"			{ return IW5::parser::make_CONTINUE(loc); }
"return"			{ return IW5::parser::make_RETURN(loc); }
"thread"			{ return IW5::parser::make_THREAD(loc); }
"childthread"		{ return IW5::parser::make_CHILDTHREAD(loc); }
"thisthread"		{ return IW5::parser::make_THISTHREAD(loc); }
"call"				{ return IW5::parser::make_CALL(loc); }
"true"				{ return IW5::parser::make_TRUE(loc); }
"false"				{ return IW5::parser::make_FALSE(loc); }
"undefined"			{ return IW5::parser::make_UNDEFINED(loc); }
"size"				{ return IW5::parser::make_SIZE(loc); }
"game"				{ return IW5::parser::make_GAME(loc); }
"self"				{ return IW5::parser::make_SELF(loc); }
"anim"				{ return IW5::parser::make_ANIM(loc); }
"level"				{ return IW5::parser::make_LEVEL(loc); }
"[]"				{ return IW5::parser::make_EMPTY_ARRAY(loc); }
\(					{ return IW5::parser::make_LPAREN(loc); }
\)					{ return IW5::parser::make_RPAREN(loc); }
\{					{ return IW5::parser::make_LBRACE(loc); }
\}					{ return IW5::parser::make_RBRACE(loc); }
\[					{ return IW5::parser::make_LBRACKET(loc); }
\]					{ return IW5::parser::make_RBRACKET(loc); }
\,					{ return IW5::parser::make_COMMA(loc); }
\.					{ return IW5::parser::make_DOT(loc); }
\:\:				{ return IW5::parser::make_DOUBLECOLON(loc); }
\:					{ return IW5::parser::make_COLON(loc); }
\;					{ return IW5::parser::make_SEMICOLON(loc); }
\+\+				{ return IW5::parser::make_INCREMENT(loc); }
\-\-				{ return IW5::parser::make_DECREMENT(loc); }
\<\<\=				{ return IW5::parser::make_ASSIGN_LSHIFT(loc); }
\>\>\=				{ return IW5::parser::make_ASSIGN_RSHIFT(loc); }
\<\<				{ return IW5::parser::make_LSHIFT(loc); }
\>\>				{ return IW5::parser::make_RSHIFT(loc); }
\|\|				{ return IW5::parser::make_OR(loc); }
\&\&				{ return IW5::parser::make_AND(loc); }
\=\=				{ return IW5::parser::make_EQUALITY(loc); }
\!\=				{ return IW5::parser::make_INEQUALITY(loc); }
\<\=				{ return IW5::parser::make_LESS_EQUAL(loc); }
\>\=				{ return IW5::parser::make_GREATER_EQUAL(loc); }
\<					{ return IW5::parser::make_LESS(loc); }
\>					{ return IW5::parser::make_GREATER(loc); }
\+\=				{ return IW5::parser::make_ASSIGN_ADD(loc); }
\-\=				{ return IW5::parser::make_ASSIGN_SUB(loc); }
\*\=				{ return IW5::parser::make_ASSIGN_MULT(loc); }
\/\=				{ return IW5::parser::make_ASSIGN_DIV(loc); }
\%\=				{ return IW5::parser::make_ASSIGN_MOD(loc); }
\|\=				{ return IW5::parser::make_ASSIGN_BITWISE_OR(loc); }
\&\=				{ return IW5::parser::make_ASSIGN_BITWISE_AND(loc); }
\^\=				{ return IW5::parser::make_ASSIGN_BITWISE_EXOR(loc); }
\=					{ return IW5::parser::make_ASSIGN(loc); }
\+					{ return IW5::parser::make_ADD(loc); }
\-					{ return IW5::parser::make_SUB(loc); }
\*					{ return IW5::parser::make_MULT(loc); }
\/					{ return IW5::parser::make_DIV(loc); }
\%					{ return IW5::parser::make_MOD(loc); }
\!					{ return IW5::parser::make_NOT(loc); }
\~					{ return IW5::parser::make_COMPLEMENT(loc); }
\|					{ return IW5::parser::make_BITWISE_OR(loc); }
\&					{ return IW5::parser::make_BITWISE_AND(loc); }
\^					{ return IW5::parser::make_BITWISE_EXOR(loc); }

{RGX_FILE}			{ return IW5::parser::make_FILE(std::string(yytext), loc); }
{RGX_NAME}			{ return IW5::parser::make_NAME(utils::string::to_lower(yytext), loc); }
\&{RGX_STRING}		{ return IW5::parser::make_ISTRING(std::string(yytext).substr(1), loc); }
{RGX_STRING}		{ return IW5::parser::make_STRING(std::string(yytext), loc); }
{RGX_FLOAT}			{ return IW5::parser::make_FLOAT(std::string(yytext), loc); }
{RGX_INTEGER}		{ return IW5::parser::make_INTEGER(std::string(yytext), loc); }

<<EOF>>				{ return IW5::parser::make_IW5EOF(loc); }
<*>{RGX_DEFAULT}	{ throw IW5::parser::syntax_error(loc, "invalid character: \'" + std::string(yytext) + "\'"); }
%%
